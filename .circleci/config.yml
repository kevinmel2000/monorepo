# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2
jobs:
  build:
    docker:
      # specify the version
      - image: circleci/golang:1.9
      - image: postgres:9.6.2-alpine
        environment:
          LC_ALL: C.UTF-8
          POSTGRES_USER: exampleapp
          POSTGRES_PASSWORD: exampleapp
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    #### TEMPLATE_NOTE: go expects specific checkout path representing url
    #### expecting it in the form of
    ####   /go/src/github.com/circleci/go-tool
    ####   /go/src/bitbucket.org/circleci/go-tool
    working_directory: /go/src/github.com/lab46/example
    steps:
      - checkout
      # - run:
      #     name: install dockerize
      #     command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
      #     environment:
      #       DOCKERIZE_VERSION: v0.3.0

      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      # specify any bash command here prefixed with `run: `
      - run: go get -u github.com/golang/dep/...
      - run: dep ensure -v -vendor-only
      - run: go install github.com/lab46/example/tools/git-test
      - run:
          name: Run unit tests
          command: |
            make test.circleci